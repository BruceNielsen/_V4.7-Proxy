using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using NetOffice;
using _Word = NetOffice.WordApi;
using NetOffice.WordApi.Enums;
using NLog;

using System.Reflection;
using System.Globalization;

namespace FruPak.PF.PrintLayer
{
    public class Word
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();     

        private static string _templatePath;
        private static _Word.Application wordApplication;
        private static _Word.Document newDocument;
        public static string TemplatePath
        {
            get;
            set;
        }
        public static string TemplateName
        {
            get;
            set;
        }
        public static string FilePath
        {
            get;
            set;
        }
        public static string FileName
        {
            get;
            set;
        }
        public static string fileExt
        {
            get;
            set;
        }
        public static string Printer
        {
            get;
            set;
        }
        public static string BarcodePath
        {
            get;
            set;
        }
        public static string BarcodeName
        {
            get;
            set;
        }
        public static string BarcodeFull
        {
            get;
            set;
        }
        public static void Server_Print( string Data, int int_Current_User_Id)
        {
            FruPak.PF.Data.AccessLayer.SY_PrintRequest.Insert(FruPak.PF.Common.Code.General.int_max_user_id("SY_PrintRequest"), Printer, TemplateName, FileName, Data, int_Current_User_Id);
        }
        public static bool Test_for_Word()
        {
            bool bol_Word = false;
            try
            {
                wordApplication = new _Word.Application();
                bol_Word = true;
                CloseWord();
            }
            catch
            {
                bol_Word = false;
            }
            return bol_Word;
        }
        public static void StartWord()
        {           
            // start word and turn off msg boxes
            wordApplication = new _Word.Application();
            wordApplication.DisplayAlerts = WdAlertLevel.wdAlertsNone;
            _templatePath = @TemplatePath + "\\" + TemplateName + GetTemplateExtension(wordApplication);
            fileExt = GetDefaultExtension(wordApplication);
            OpenTemplate();
        }
        public static void StartWord_No_Template()
        {
            // start word and turn off msg boxes
            wordApplication = new _Word.Application();
            wordApplication.DisplayAlerts = WdAlertLevel.wdAlertsNone;
            _templatePath = @TemplatePath + "\\" + TemplateName + GetTemplateExtension(wordApplication);
            fileExt = GetDefaultExtension(wordApplication);
        }
        public static void OpenTemplate()
        {
            try
            {
                // add a new document
                newDocument = wordApplication.Documents.Add(Path.GetFullPath(_templatePath));
            }
            catch (Exception ex)
            {
                logger.Log(LogLevel.Debug, ex.Message);
            }
        }
        public static void OpenDoc()
        {
            object missing = System.Reflection.Missing.Value;
            object readOnly = false;
            object isVisible = true;

 
            try
            {
                // add a new document
                newDocument = wordApplication.Documents.Open(@FilePath + "\\" + FileName + GetDefaultExtension(wordApplication), missing, missing, missing, missing, missing, missing, missing, missing, missing, 
                    missing, isVisible,missing);
            }
            catch (Exception ex)
            {
                logger.Log(LogLevel.Debug, ex.Message);
            }
        }
        public static void OpenDoc_to_View()
        {
            object missing = System.Reflection.Missing.Value;
            object readOnly = true;
            object isVisible = false;


            try
            {
                // add a new document
                newDocument = wordApplication.Documents.Open(@FilePath + "\\" + FileName + GetDefaultExtension(wordApplication), missing, readOnly, missing, missing, missing, missing, missing, missing, missing,
                    missing, isVisible, missing);
            }
            catch (Exception ex)
            {
                logger.Log(LogLevel.Debug, ex.Message);
            }
        }
        public static void Merge(List<string> filesToMerge)
        {
            // Make a Word selection object.
            _Word.Selection selection = wordApplication.Selection;
            

            // Loop thru each of the Word documents
            foreach (string file in filesToMerge)
            {
                // Insert the files to our template
               // selection.InsertNewPage();
                selection.InsertFile(file);
                
            }

        }

        public static void ReplaceText(string Bookmark, string NewText)
        {
            if (newDocument.Bookmarks.Exists(Bookmark))
            {                
                newDocument.Bookmarks[Bookmark].Range.Text = NewText;
            }
        }
        public static void ChangeFontSize(string Bookmark, float font_size)
        {
            _Word.Range range = newDocument.Bookmarks[Bookmark].Range;

            range.Font.Size = font_size;
            newDocument.Bookmarks[Bookmark].Range.Font.Size = font_size;
        }
        public static void Add_Barcode(string Bookmark)
        {
            string text = newDocument.Content.Text;

            if (newDocument.Bookmarks.Exists(Bookmark))
            {
                object saveWithDocument = true;
                object missing = Type.Missing;

                Object name = Bookmark;
                _Word.Range range = newDocument.Bookmarks[Bookmark].Range;

                if (BarcodeFull == "" || BarcodeFull == null)
                {
                    BarcodeFull = @BarcodePath + "\\" + BarcodeName;
                }
                newDocument.InlineShapes.AddPicture(BarcodeFull, missing, saveWithDocument, range);               
            }
        }
        public static int SaveAS()
        {
            int return_code = 0;
            try
            {
                newDocument.SaveAs(@FilePath + "\\" + FileName + GetDefaultExtension(wordApplication));
            }
            catch (Exception ex)
            {
                logger.Log(LogLevel.Debug, ex.Message);
                return_code = 9;
            }

            return return_code;
        }
        /// <summary>
        /// returns the valid file extension for the instance. for example ".doc" or ".docx"
        /// </summary>
        /// <param name="application">the instance</param>
        /// <returns>the extension</returns>
        private static string GetDefaultExtension(_Word.Application application)
        {
            double version = Convert.ToDouble(application.Version, CultureInfo.InvariantCulture);
            //if (version >= 12.00)
            if (version > 11.0)
                return ".docx";
            else
                return ".doc";
        }
        private static string GetTemplateExtension(_Word.Application application)
        {
            double version = Convert.ToDouble(application.Version, CultureInfo.InvariantCulture);
            //System.Windows.Forms.MessageBox.Show(Convert.ToString(version));
            //if (version >= 12.00)
            if (version > 11.0)
            {
                
                return ".dotx";
            }
            else
                return ".dot";
        }
        public static int Print()
        {
            int return_code = 0;
            string default_printer = "";
            //store current default printer - "Send To OneNote 2013"

            default_printer = wordApplication.ActivePrinter;


            try
            {
                //change printer
                wordApplication.ActivePrinter = Printer;
            }
            catch (Exception ex)
            {
                logger.Log(LogLevel.Debug, ex.Message);
            }                    
            

            double version = Convert.ToDouble(wordApplication.Version, CultureInfo.InvariantCulture);
            object oBackground = false;

            FileInfo wordFile = new FileInfo(@FilePath + "\\" + FileName + GetDefaultExtension(wordApplication));
            object fileObject = wordFile.FullName;
            object outputfile = @FilePath + "\\" + FileName;

            object oMissing = System.Reflection.Missing.Value;
            object oTrue = true;
            //Word 2007
            if (version == 12.0)
            {
                //trial for 2007 start
                FilePath = @"\\FruPak-SBS\PublicDocs\\FruPak\Client\Printing\Saved";
                FileName = "Dave1";
                return_code = FruPak.PF.PrintLayer.Word.SaveAS();


                Microsoft.Office.Interop.Word.Application wordInstance = new Microsoft.Office.Interop.Word.Application();



                Microsoft.Office.Interop.Word.Document doc = wordInstance.Documents.Open(ref fileObject, ref oMissing, ref oTrue, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing);
                doc.Activate();
                doc.PrintOut(oBackground, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing);


                //end
            }
            else
            {
                try
                {
                    // old code that worked for Robin, Glenys, and Dave's machines
                    wordApplication.PrintOut(oBackground);
                }
                catch (Exception ex)
                {
                    logger.Log(LogLevel.Debug, ex.Message);
                    return_code = 9;
                }

            }

            //reset Default Printer
            wordApplication.ActivePrinter = default_printer;

            return return_code;
        }
        public static void CloseWord()
        {
            try
            {
                // close word and dispose reference
                object ofalse = false;
                wordApplication.Quit(ofalse);
                wordApplication.Dispose();
                //System.Runtime.InteropServices.Marshal.FinalReleaseComObject(wordApplication);
                
                if (wordApplication != null)
                {
                    //System.Runtime.InteropServices.Marshal.FinalReleaseComObject(wordApplication);
                    wordApplication = null;
                }

            }
            catch (System.ArgumentException ae)
            {
                logger.Log(LogLevel.Debug, ae.Message);
            }
            catch (Exception ex)
            {
                logger.Log(LogLevel.Debug, ex.Message);
            }
        }
        public static int SaveASPDF()
        {
            int return_code = 0;

            object missing = System.Reflection.Missing.Value;

            string paramExportFilePath = @FilePath + @"\" + FileName;
            
            WdExportFormat paramExportFormat = WdExportFormat.wdExportFormatPDF;
            bool paramOpenAfterExport = false;
            WdExportOptimizeFor paramExportOptimizeFor = WdExportOptimizeFor.wdExportOptimizeForPrint;
            WdExportRange paramExportRange = WdExportRange.wdExportAllDocument;
            int paramStartPage = 0;
            int paramEndPage = 0;
            WdExportItem paramExportItem = WdExportItem.wdExportDocumentContent;
            bool paramIncludeDocProps = true;
            bool paramKeepIRM = true;
            WdExportCreateBookmarks paramCreateBookmarks = WdExportCreateBookmarks.wdExportCreateWordBookmarks;
            bool paramDocStructureTags = true;
            bool paramBitmapMissingFonts = true;
            bool paramUseISO19005_1 = false;

            try
            {                
                newDocument.ExportAsFixedFormat(paramExportFilePath,
                    paramExportFormat, paramOpenAfterExport,
                    paramExportOptimizeFor, paramExportRange, paramStartPage,
                    paramEndPage, paramExportItem, paramIncludeDocProps,
                    paramKeepIRM, paramCreateBookmarks, paramDocStructureTags,
                    paramBitmapMissingFonts, paramUseISO19005_1,
                    missing);
            }
            catch (Exception ex)
            {
                logger.Log(LogLevel.Debug, ex.Message);
                return_code = 9;
                System.Windows.Forms.MessageBox.Show(ex.Message.ToString());
            }

            return return_code;
        }
        public static int SaveASXPS()
        {
            int return_code = 0;

            object missing = System.Reflection.Missing.Value;

            string paramExportFilePath = @FilePath + "\\" + FileName;
            WdExportFormat paramExportFormat = WdExportFormat.wdExportFormatXPS;
            bool paramOpenAfterExport = false;
            WdExportOptimizeFor paramExportOptimizeFor = WdExportOptimizeFor.wdExportOptimizeForPrint;
            WdExportRange paramExportRange = WdExportRange.wdExportAllDocument;
            int paramStartPage = 0;
            int paramEndPage = 0;
            WdExportItem paramExportItem = WdExportItem.wdExportDocumentContent;
            bool paramIncludeDocProps = true;
            bool paramKeepIRM = true;
            WdExportCreateBookmarks paramCreateBookmarks = WdExportCreateBookmarks.wdExportCreateWordBookmarks;
            bool paramDocStructureTags = true;
            bool paramBitmapMissingFonts = true;
            bool paramUseISO19005_1 = false;

            try
            {
                newDocument.ExportAsFixedFormat(paramExportFilePath,
                    paramExportFormat, paramOpenAfterExport,
                    paramExportOptimizeFor, paramExportRange, paramStartPage,
                    paramEndPage, paramExportItem, paramIncludeDocProps,
                    paramKeepIRM, paramCreateBookmarks, paramDocStructureTags,
                    paramBitmapMissingFonts, paramUseISO19005_1,
                    missing);
            }
            catch (Exception ex)
            {
                return_code = 9;
                logger.Log(LogLevel.Debug, ex.Message);
            }

            return return_code;
        }

    }
}